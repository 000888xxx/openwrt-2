#!/bin/sh /etc/rc.common

START=97

PIDFILE="/tmp/run/watchpig"
#### Luci-app-mact ########
interface=$(uci get watchpig.@mac[0].interface 2>/dev/null)
run_random()
{
	enable=$(uci get watchpig.@mac[0].enable 2>/dev/null)
	minute=$(uci get watchpig.@mac[0].minute 2>/dev/null)
	week=$(uci get watchpig.@mac[0].week 2>/dev/null)
	hour=$(uci get watchpig.@mac[0].hour 2>/dev/null)

	if [ "$enable"x != "1"x ]; then
		sed -i '/#random_mac/d' /etc/crontabs/root
		logger -p user.info -t "watchpig(mac)" "删除定时任务：“定时修改mac地址”"
		killall crond
		/usr/sbin/crond
		return
	fi

	if [ $minute = 0 ] ; then
        	minute="00"
	fi

    	if [ $week = 0 ] ; then
        	week="*"
	fi

	sed -i '/#random_mac/d' /etc/crontabs/root >/dev/null 2>&1
	echo "$minute $hour * * $week /usr/bin/watchpig.sh "random_mac" #random_mac" >> /etc/crontabs/root
	[ "$week" = "*" ]&& logger -p user.info -t "watchpig(mac)" "已添加定时任务：“将每天在$hour点$minute分修改mac地址”"
	[ "$week" != "*" ]&& logger -p user.info -t "watchpig(mac)" "已添加定时任务：“将在每个星期的第$week天$hour点$minute分修改mac地址”"
	logger -p user.info -t "watchpig(mac)" "Auto RANDOM_MAC has started."
	killall crond
	/usr/sbin/crond
}

#### Luci-app-mac ########

####Primary watchpig########
append_string() {
	local varname="$1"; local add="$2"; local separator="${3:- }"; local actual
	eval "actual=\$$varname"

	new="${actual:+$actual$separator}$add"
	eval "$varname=\$new"
}

##defined time
timetoseconds() {
	local time=$1
	unset seconds

	{ [ "$time" -ge 1 ] 2> /dev/null && seconds="$time"; } || \
	{ [ "${time%s}" -ge 1 ] 2> /dev/null && seconds="${time%s}"; } || \
	{ [ "${time%m}" -ge 1 ] 2> /dev/null && seconds=$((${time%m}*60)); } || \
	{ [ "${time%h}" -ge 1 ] 2> /dev/null && seconds=$((${time%h}*3600)); } || \
	{ [ "${time%d}" -ge 1 ] 2> /dev/null && seconds=$((${time%d}*86400)); }
}

load_watchpig() {
	config_get period	$1 period
	config_get mode		$1 mode		"allways"
	config_get pinghosts	$1 pinghosts	"8.8.8.8"
	config_get pingperiod	$1 pingperiod
	config_get forcedelay	$1 forcedelay	"0"
	config_get custom	$1 command

	# Fix potential typo in mode (backward compatibility).
	[ "$mode" = "allways" ] && mode="allways" ##mode 1

	error=""

	timetoseconds "$period"
	period="$seconds"
	[ "$period" -ge 1 ] \
		|| append_string "error" 'period is not a valid time value (ex: "30"; "4m"; "6h"; "2d")' "; "
	[ "$mode" = "allways" -o "$mode" = "ping1" -o "$mode" = "ping2" -o "$mode" = "ping3" -o "$mode" = "RanMac" -o "$mode" = "Noping" ] \
		|| append_string "error" "mode must be 'allways' or 'ping1' or 'ping2' or 'ping3' or 'RanMac' or 'Noping'" "; "
	[ -n "$pinghosts" -o "$mode" = "allways" -o "$mode" = "RanMac" -o "$mode" = "Noping" ] \
		|| append_string "error" "pinghosts must be set when in 'ping' mode" "; "
	[ "$mode" = "ping3" -o "$mode" = "ping1" -o "$mode" = "ping2" ] && {
		if [ -n "$pingperiod" ]
		then
			timetoseconds "$pingperiod"
			pingperiod="$seconds"
			if [ "$pingperiod" -ge 0 ]
			then
				[ "$pingperiod" -lt "$period" ] \
					|| append_string "error" "pingperiod must be less than period" "; "
			else
				append_string "error" 'pingperiod is not a valid time value (ex: "30"; "4m"; "6h"; "2d")' "; "
			fi
		else
			pingperiod="$((period/20))"
				logger -p user.info -t "watchpig" "pingperiod is empty，automatically take 1/20 of period(${period}s)"
		fi
	}
	[ "$forcedelay" -ge 0 ] \
		|| append_string "error" "forcedelay must be a integer greater or equal than 0, where 0 means disabled" "; "

	[ -n "$error" ] && { logger -p user.err -t "watchpig" "reboot program $1 not started - $error"; return; }

	if [ "$mode" = "allways" ]
	then
		/usr/bin/watchpig.sh "allways" "$period" "$forcedelay" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“周期性重启”，若需要重启修改mac，请在上面选择“开机修改mac”选项"
	elif [ "$mode" = "RanMac" ]; then
		/usr/bin/watchpig.sh "RanMac" "$period" "$forcedelay" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“周期性重连并修改mac地址”"
	elif [ "$mode" = "Noping" ]; then
		/usr/bin/watchpig.sh "Noping" "$period" "$forcedelay" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“周期性重连”"
	elif [ "$mode" = "ping1" ]; then
		/usr/bin/watchpig.sh "ping1" "$period" "$forcedelay" "$pinghosts" "$pingperiod" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;pinghosts=$pinghosts;pingperiod=$pingperiod;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“断网自动重启”，若需要重启修改mac，请在上面选择“开机修改mac”选项"
	elif [ "$mode" = "ping2" ]; then
		/usr/bin/watchpig.sh "ping2" "$period" "$forcedelay" "$pinghosts" "$pingperiod" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;pinghosts=$pinghosts;pingperiod=$pingperiod;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“断网自动重连”"
	elif [ "$mode" = "ping3" ]; then
		/usr/bin/watchpig.sh "ping3" "$period" "$forcedelay" "$pinghosts" "$pingperiod" "${custom:-}"&
		logger -p user.info -t "watchpig" "started task (mode=$mode;period=$period;pinghosts=$pinghosts;pingperiod=$pingperiod;forcedelay=$forcedelay)"
		logger -p user.info -t "watchpig" "开启：“断网自动重连并修改mac地址”"
	fi

	if [ -n "$custom" ]; then
	 logger -p user.info -t "watchpig" "Custom command:$custom"
	fi
	echo $! >> "${PIDFILE}.pids"
}
####Primary Watchcat########

stop() {
	if [ -f "${PIDFILE}.pids" ]
	then
		logger -p user.info -t "watchpig" "stopping all tasks"

		while read pid
		do
			kill -KILL "$pid"
		done < "${PIDFILE}.pids"

		rm "${PIDFILE}.pids"

		logger -p user.info -t "watchpig" "all tasks stopped"
	else
		logger -p user.info -t "watchpig" "no tasks running"
	fi
}

start() {
	mac=$(uci get watchpig.@mac[0].macaddr 2>/dev/null)
	wan_network_mac=$(uci get network.$interface.macaddr 2>/dev/null)
	reboot_run=$(uci get watchpig.@mac[0].reboot_run 2>/dev/null)
	logger -t "watchpig" "##################New Log######################"
	if [ "$reboot_run" != "1" ]; then
		sed -i '/#watchpig_mac/d' /etc/rc.local >/dev/null 2>&1
		logger -p user.info -t "watchpig(mac)" "“开机自动修改mac地址”事件已删除"
	else
		sed -i '/#watchpig_mac/d' /etc/rc.local >/dev/null 2>&1
		echo "/usr/bin/watchpig.sh "random_mac" "$interface" #watchpig_mac" >> /etc/rc.local
		logger -p user.info -t "watchpig(mac)" "已添加开机自动修改mac地址"
	fi
	
	if [ "$mac" != "$wan_network_mac" ]; then
		uci set network.$interface.macaddr="$mac" 2>/dev/null
		uci commit 2>/dev/null
		logger -p user.info -t "watchpig(mac)" "已修改wan口mac地址（会同时修改wan6口mac地址）"
		sleep 3
		/etc/init.d/network reload
	fi
	run_random
	
	[ -f "${PIDFILE}.pids" ] && stop
	config_load watchpig
	if [ -n "$(uci show watchpig.@watchpig[0])" ] # at least one watchpig section exists
	then
		logger -p user.info -t "watchpig" "starting all tasks"
		config_foreach load_watchpig watchpig
		logger -p user.info -t "watchpig" "all tasks started"
	else
		logger -p user.info -t "watchpig" "no tasks defined"
	fi
	logger -t "watchpig" "##################Log End######################"
	#####echo "`logread | grep watchpig`" > /tmp/watchpig.log
}
